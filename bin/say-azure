#!/usr/bin/env python3

import requests
import subprocess
import argparse
import keyring
import os

service_name = "azuretts"

parser = argparse.ArgumentParser(description="Azure TTS")
parser.add_argument("text", help="Text to be converted to speech", nargs="*")
parser.add_argument("--list", help="List available voices", action="store_true")
parser.add_argument("--voice", help="Override voice to use", default=None, type=str)
parser.add_argument("--lang", help="Override language", default=None, type=str)
parser.add_argument("--refresh", help="Refresh API key", action="store_true")
parser.add_argument("--keep-mp3", help="Keep mp3 file", action="store_true")
args = parser.parse_args()

text = " ".join(args.text)

lang = args.lang
voice = args.voice

VOICES = {
    "en-US": "en-US-JaneNeural",
    "zh-CN": "zh-CN-XiaoxiaoNeural",
}

# Replace with your Speech Service API key and region
api_key = keyring.get_password(service_name, "api_key")
if api_key is None or args.refresh:
    api_key = input("Enter API key: ")
    keyring.set_password(service_name, "api_key", api_key)
region = "eastus"

# Get token
token_url = "https://{}.api.cognitive.microsoft.com/sts/v1.0/issueToken".format(region)
headers = {"Ocp-Apim-Subscription-Key": api_key}
response = requests.post(token_url, headers=headers)

# Check the response status
if response.status_code == 200:
    token = str(response.content, "utf-8")
else:
    print("An error occurred when issuing token:", response.status_code, response.text)
    exit(1)

# List available voices
if args.list:
    voices_url = (
        "https://{}.tts.speech.microsoft.com/cognitiveservices/voices/list".format(
            region
        )
    )
    response = requests.get(voices_url, headers=headers).json()
    for voice in response:
        print(voice["ShortName"], voice["Locale"])
else:
    if args.text is None:
        print("No text to convert to speech")
        exit(1)
    # Language detection
    if lang is None:
        # Does it contain Chinese characters?
        if any("\u4e00" <= c <= "\u9fff" for c in args.text):
            lang = "zh-CN"
        else:
            lang = "en-US"
    if voice is None:
        voice = VOICES.get(lang)
        if voice is None:
            print("No voice for language", lang)
            exit(1)
    # Azure TTS endpoint
    tts_endpoint = "https://{}.tts.speech.microsoft.com/cognitiveservices/v1".format(
        region
    )

    # Set up headers for the request
    headers = {
        "Content-Type": "application/ssml+xml",
        "X-Microsoft-OutputFormat": "audio-16khz-64kbitrate-mono-mp3",
        "Authorization": "Bearer " + token,
    }

    # Construct the SSML (Speech Synthesis Markup Language) document to send in the request
    ssml = f"""<speak version='1.0' xml:lang='{lang}'>
        <voice xml:lang='{lang}' xml:gender='Female' name='{voice}'>
            {args.text}
        </voice></speak>"""

    # Send the request to Azure TTS API
    response = requests.post(tts_endpoint, headers=headers, data=ssml.encode("utf-8"))

    # Check the response status
    if response.status_code == 200:
        with open("/tmp/output.mp3", "wb") as f:
            f.write(response.content)
        try:
            subprocess.run(["mpv", "--really-quiet", "/tmp/output.mp3"])
        finally:
            if not args.keep_mp3:
                os.remove("/tmp/output.mp3")
            else:
                print("MP3 file saved to /tmp/output.mp3")
    else:
        print("An error occurred:", response.status_code, response.text)
        exit(1)
