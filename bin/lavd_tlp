#!/usr/bin/env python3
import dbus
import dbus.mainloop.glib
from gi.repository import GLib
import time

dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
bus = dbus.SystemBus()

SCHEDULER_NAME = "scx_lavd"

def get_current_scheduler():
    proxy = bus.get_object("org.scx.Loader", "/org/scx/Loader")

    interface = dbus.Interface(proxy, dbus_interface="org.freedesktop.DBus.Properties")
    current_scheduler = interface.Get("org.scx.Loader", "CurrentScheduler")

    return current_scheduler


def get_is_on_battery():
    proxy = bus.get_object("org.freedesktop.UPower", "/org/freedesktop/UPower")

    interface = dbus.Interface(proxy, dbus_interface="org.freedesktop.DBus.Properties")
    on_battery = interface.Get("org.freedesktop.UPower", "OnBattery")

    return on_battery


def switch_scheduler_mode(mode):
    proxy = bus.get_object("org.scx.Loader", "/org/scx/Loader")

    switch_scheduler_method = proxy.get_dbus_method('SwitchScheduler', 'org.scx.Loader')
    switch_scheduler_method(SCHEDULER_NAME, dbus.UInt32(mode))


def switch_powersave():
    print("Switching to powersave mode...")
    switch_scheduler_mode(2)


def switch_performance():
    print("Switching to performance mode...")
    switch_scheduler_mode(1)


def handle_power_change(device, changed_properties, invalidated_properties):
    """Handles power source changes."""
    if "OnBattery" in changed_properties:
        on_battery = changed_properties["OnBattery"]
        if not on_battery:
            print("AC power connected!")
            switch_performance()
        else:
            print("Battery power detected!")
            switch_powersave()


def main():
    scheduler = get_current_scheduler()
    if scheduler != SCHEDULER_NAME:
        print(f"Current scheduler is not {SCHEDULER_NAME}. Exiting...")
        exit(1)
    if get_is_on_battery():
        switch_powersave()
    else:
        switch_performance()

    bus.add_signal_receiver(
        handle_power_change,
        bus_name="org.freedesktop.UPower",
        path="/org/freedesktop/UPower",
        dbus_interface="org.freedesktop.DBus.Properties",
        signal_name="PropertiesChanged",
    )

    # Run the main loop to listen for signals
    loop = GLib.MainLoop()
    print("Listening for power source changes...")
    loop.run()


if __name__ == "__main__":
    main()
